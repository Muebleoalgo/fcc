---
// Stats.astro
import type { Stats as Props } from '~/types';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Headline from '../ui/Headline.astro';
import { Icon } from 'astro-icon/components';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  stats = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<script>
  function countUp(element, endValue) {
    let start = 0;
    const duration = 1200; // Duración de 0.5 segundos
    const increment = endValue / (duration / 16);

    function step() {
      start += increment;
      if (start >= endValue) {
        element.textContent = endValue.toString();
      } else {
        element.textContent = Math.floor(start).toString();
        requestAnimationFrame(step);
      }
    }
    requestAnimationFrame(step);
  }

  function initializeCountUp() {
    const statsElements = document.querySelectorAll('.stat-amount');

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target;
            const amount = parseInt(element.getAttribute('data-amount') || '0', 10);
            countUp(element, amount);
            observer.unobserve(element); // Dejar de observar después de iniciar el conteo
          }
        });
      },
      {
        threshold: 0.1, // Iniciar cuando el 10% del elemento sea visible
      }
    );

    statsElements.forEach((element) => {
      observer.observe(element);
    });
  }

  // Escucha el evento después de cada transición de página en Astro
  document.addEventListener('astro:after-swap', initializeCountUp);
  // También lo llamamos en la primera carga
  document.addEventListener('DOMContentLoaded', initializeCountUp);
</script>

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex flex-wrap justify-center -m-4 text-center">
    {
      stats &&
        stats.map(({ amount, title, icon }) => (
          <div class="p-4 md:w-1/4 sm:w-1/2 w-full min-w-[220px] text-center md:border-r md:last:border-none dark:md:border-slate-500">
            {icon && (
              <div class="flex items-center justify-center mx-auto mb-4 text-primary">
                <Icon name={icon} class="w-10 h-10" />
              </div>
            )}
            {amount && (
              <div
                class="font-heading text-primary text-[2.6rem] font-bold dark:text-white lg:text-5xl xl:text-6xl stat-amount"
                data-amount={amount}
              >
                0
              </div>
            )}
            {title && (
              <div class="text-sm font-medium uppercase tracking-widest text-gray-800 dark:text-slate-400 lg:text-base">
                {title}
              </div>
            )}
          </div>
        ))
    }
  </div>
</WidgetWrapper>
